;; -*- mode: lisp -*-
(require 'cl)

(setq debug-on-error nil)
(setq visible-bell 't)
(setq debug-on-quit nil)
(setq inhibit-startup-screen t)
;; set Adobe Source Code Pro font as default
;; $ wget http://downloads.sourceforge.net/project/sourcecodepro.adobe/SourceCodePro_FontsOnly-1.017.zip
;; $ unzip SourceCodePro_FontsOnly-1.017.zip
;; $ mkdir -p ~/.fonts
;; $ cp SourceCodePro_FontsOnly-1.017/OTF/*.otf ~/.fonts/
;; $ fc-cache -f -v
;; (set-default-font "-adobe-Source Code Pro-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
;; $ sudo apt-get install fonts-inconsolata
(set-default-font "Fira Code-12")
(add-to-list 'load-path (expand-file-name "~/.emacs.local/"))

;; Add my favorite repos and  install the packages
;; I use if they aren't present
(require 'package)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(defvar my-packages
  '(helm
    webpaste
    simpleclip
    magit
    git-link
    gitconfig-mode
    gist
    markdown-mode
    rainbow-mode
    yaml-mode
    web-mode
    cycbuf
    multiple-cursors
    phi-rectangle
    dired-single
    multi-term
    buffer-move
    yasnippet
    lsp-mode
    ;; python related packages
    virtualenv
    ;; nose
    ;; pydoc-info
    flycheck
    puppet-mode
    ecb
    lua-mode
    rpm-spec-mode
    multiple-cursors
    xcscope
    org-bullets
    ;; themes
    gruber-darker-theme
    arjen-grey-theme
    gruvbox-theme
    doom-themes
    go-mode
    projectile
    helm-projectile
    treemacs
    treemacs-projectile
    ;; company
    company
    company-go
    company-jedi
    company-lsp
    )
  "A list of packages to ensure are installed at launch.")

(defun my-packages-installed-p ()
  (cl-loop for p in my-packages
        when (not (package-installed-p p)) do (cl-return nil)
        finally (cl-return t)))

(unless (my-packages-installed-p)
  ;; check for new packages (package versions)
  (package-refresh-contents)
  ;; install the missing packages
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))

; keep a list of recently opened files                                                                      
(recentf-mode 1)
(setq-default recent-save-file "~/.emacs.d/recentf")

(require 'helm-config)
(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t
      helm-M-x-fuzzy-match t ; fuzzy matching for helm-M-x
      helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t
      )
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "C-x b") #'helm-mini)
(with-eval-after-load 'helm-files
  (define-key helm-find-files-map "\t" 'helm-execute-persistent-action)
  )


(add-hook 'go-mode-hook (lambda ()
                          (set (make-local-variable 'company-backends) '(company-go))
                          (company-mode)))

(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;; easier way to cut, copy and paste
(global-set-key [f2] 'clipboard-kill-region)
(global-set-key [f3] 'clipboard-kill-ring-save)
(global-set-key [f4] 'clipboard-yank)
(global-set-key [f5]  (lambda ()
			(interactive)
			(switch-to-buffer-other-window( other-buffer))))
(global-set-key [f6] (lambda ()
		       (interactive)
		       (other-window 1)))
(global-set-key [f12] 'magit-status)

(global-set-key [(control g)] 'goto-line) ;; use Control+g for goto-line

;; just to be sure end/home keys behave as expected
(global-set-key [end] 'end-of-line)
(global-set-key [home] 'beginning-of-line)

;; change the order of the buffers with these keybindings
(global-set-key (kbd "<s-up>")     'buf-move-up)
(global-set-key (kbd "<s-down>")   'buf-move-down)
(global-set-key (kbd "<s-left>")   'buf-move-left)
(global-set-key (kbd "<s-right>")  'buf-move-right)

(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<f7>") 'next-error)

(setq default-major-mode 'text-mode) ;;Text mode is happier than Fundamental mode ;-)
(setq-default fill-column 78)
(setq tab-width 4) ;; setup the tab to 4 spaces width
(setq-default indent-tabs-mode nil) ;; Prevent Extraneous Tabs

(setq projectile-project-search-path '("~/Projects/" "~/sources/upstream/"))

(require 'request)
(require 'cl-lib)
(require 'webpaste)
(defun paste-ubuntu-field-lambda ()
  "lambda for building post compatible with paste.ubuntu.com."
  (cl-function (lambda (&key text
                             post-field
                             provider-uri
                             (post-lang-field-name nil)
                             (post-data '()))
                 (cl-pushnew (cons post-field text) post-data)

                 ;; Fetch language name for this provider
                 (let ((language-name (webpaste--get-buffer-language provider-uri)))
                   (if (and post-lang-field-name language-name)
                       ;; Append language to the post-data
                       (cl-pushnew (cons post-lang-field-name language-name) post-data)
                     ;; if language coudn't be detected simply use text the
                     ;; default handler ommits the post-lang-field-name if
                     ;; couldn't be detected, but for paste.ubuntu.com this is
                     ;; mandatory
                     (cl-pushnew (cons post-lang-field-name "text") post-data)
                     ))

                 post-data)))

(cl-defun paste-ubuntu-location-header ()
  "Callback to get the Location header and append it to paste.ubuntu.com."
  (cl-function (lambda (&key response &allow-other-keys)
                 (when response
                   (webpaste--return-url
                    (request-response-url response))))))

(add-to-list
 'webpaste-providers-alist
 '("paste.ubuntu.com"
   :uri "https://paste.ubuntu.com/"
   :post-data (("poster" . (user-login-name))
               ;; make the paste expire in a week.
               ("expiration" . "week"))
   :post-field "content"
   :post-lang-field-name "syntax"
   :post-field-lambda paste-ubuntu-field-lambda
   :success-lambda paste-ubuntu-location-header
   )
 )

(setq webpaste-provider-priority '("paste.ubuntu.com"))
;; To build your own hook to use simpleclip, you could do like this:
(add-hook 'webpaste-return-url-hook
          (lambda (url)
            (message "Copied URL to clipboard: %S" url)
            (simpleclip-set-contents url)))
;; Open recently created pastes in an external browser
(setq webpaste-open-in-browser t)

;; define the mail and name
(setq user-mail-address "freyes@tty.cl")
(setq user-full-name "Felipe Reyes")
(fset 'yes-or-no-p 'y-or-n-p)
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(setq ispell-dictionary "american") ;; define the ispell dictionary to use
(setq x-select-enable-clipboard t) ;; cutting and pasting uses the clipboard

(show-paren-mode t)
(require 'linum)

(delete-selection-mode 1) ;;-> backspace on a selected region -> deletion

;;display line and column number in toolbar
(setq line-number-mode t)
(setq column-number-mode t)

;; enable TRAMP!
(require 'tramp)
(setq tramp-default-method "ssh")

;; UI related modes
(tool-bar-mode -1) ;; turn off toolbar
(scroll-bar-mode -1) ;; turn off scrollbar


(require 'whitespace)
(setq whitespace-style '(face empty tabs lines-tail trailing))

(require 'multiple-cursors)
(require 'phi-rectangle)
(phi-rectangle-mode 1)

(require 'yasnippet)
(require 'ecb)
;; setup the modes I use for programming (buffer editing)
(autoload 'css-mode "css-mode")
(add-hook 'css-mode-hook 'rainbow-mode)
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.tpl$" . web-mode))

(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))


;; use message-mode while I write an email using mutt
(add-to-list 'auto-mode-alist '("/tmp/mutt.*" . message-mode))

;; use a single buffer to navigate directories
(require 'dired-x)
(require 'dired-single)
(defun my-dired-init ()
  "Bunch of stuff to run for dired, either immediately or when it's
   loaded."
  ;; <add other stuff here>
  (define-key dired-mode-map [return] 'dired-single-buffer)
  (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
  (define-key dired-mode-map "^"
    (function
     (lambda nil (interactive) (dired-single-buffer "..")))))

;; if dired's already loaded, then the keymap will be bound
(if (boundp 'dired-mode-map)
    ;; we're good to go; just add our bindings
    (my-dired-init)
  ;; it's not loaded yet, so add our bindings to the load-hook
  (add-hook 'dired-load-hook 'my-dired-init))

;; multi-term is really close to xterm or something equivalent
(autoload 'multi-term "multi-term" nil t)
(autoload 'multi-term-next "multi-term" nil t)
(setq multi-term-program "/bin/bash")   ;; use bash
(global-set-key (kbd "C-c t") 'multi-term-next)
(global-set-key (kbd "C-c T") 'multi-term) ;; create a new one
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("696927ed40057050d219989dd473cc08fab27995e4febd6cf14429a448364bc6" "ce8998464858cd579515f35dd9c582f03e14175d898f67ace69f6a6c5624ed68" "c5c114af83589ea10bc4aa08a32b85e475f77df321493c4e25c2b1e90e11f699" default)))
 '(delete-selection-mode nil)
 '(mark-even-if-inactive t)
 '(package-selected-packages
   (quote
    (monokai-pro-theme monokai-theme afternoon-theme hc-zenburn-theme doom-themes sublime-themes dracula-theme simpleclip webpaste company-lsp lsp-mode outline-magic treemacs treemacs-projectile helm-projectile helm xcscope yasnippet yaml-mode web-mode virtualenv rpm-spec-mode rainbow-mode puppet-mode phi-rectangle multiple-cursors multi-term markdown-mode magit lua-mode gruvbox-theme gruber-darker-theme flycheck ecb dired-single cycbuf buffer-move arjen-grey-theme)))
 '(safe-local-variable-values
   (quote
    ((virtualenv-default-directory . "/home/felipe/sources/nCloud.hg")
     (virtualenv-default-directory . "/home/felipe/sources/nCloud.git")
     (virtualenv-workon . "ncloud"))))
 '(scroll-bar-mode (quote right))
 '(transient-mark-mode 1))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-document-title ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana" :height 2.0 :underline nil))))
 '(org-level-1 ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana" :height 1.25))))
 '(org-level-2 ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana" :height 1.1))))
 '(org-level-3 ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana" :height 1.0))))
 '(org-level-4 ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana" :height 1.0))))
 '(org-level-5 ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana"))))
 '(org-level-6 ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana"))))
 '(org-level-7 ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana"))))
 '(org-level-8 ((t (:inherit default :weight bold :foreground "#e4e4ef" :font "Verdana")))))

;; (load-theme 'arjen-grey t)
;;(load-theme 'gruber-darker t)
;; (load-theme 'mytheme t)
;; (load-theme 'doom-acario-dark t)
(load-theme 'monokai t)

;; truncate lines in org-mode
(add-hook 'org-mode-hook
          (lambda ()
            (toggle-truncate-lines 1)))
(setq org-startup-truncated nil)
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "INPROGRESS(s!)" "|" "DONE(d!/!)"))
             ))
(setq org-link-abbrev-alist
      '(("bnc"  . "https://bugzilla.novell.com/show_bug.cgi?id=")
        ("gmap"      . "http://maps.google.com/maps?q=%s")
        ("google"    . "http://www.google.com/search?q=")
        ("lp"        . "https://bugs.launchpad.net/bugs/")
        ))
(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(let* ((variable-tuple
        (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
              ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
              ((x-list-fonts "Verdana")         '(:font "Verdana"))
              ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
              (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.0))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.0))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.05))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

;; python related bits
;; (require 'nose)
(require 'virtualenv)
;; (require 'pydoc-info)
(require 'flycheck)
(add-hook 'python-mode-hook 'whitespace-mode)
(add-hook 'python-mode-hook 'flycheck-mode)
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key (kbd "C-x #") 'comment-or-uncomment-region)
                      (add-to-list 'company-backends 'company-jedi)
                      )))

;; web programming
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(setq web-mode-engines-alist '(("django" . "\\.tpl\\'")))
(defun web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-indent-style 2)
  )
(add-hook 'web-mode-hook 'web-mode-hook)

;; shell scripting
(add-hook 'sh-mode-hook
          (function (lambda ()
                      (setq sh-basic-offset 2)
                      (setq sh-indentation 2)
                      )))

;; (require 'redo+)

;; source: http://www.emacswiki.org/cgi-bin/wiki/Journal
(defun insert-now ()
  "Insert string for the current time formatted like '2:34 PM'."
  (interactive)                 ; permit invocation in minibuffer
  (insert (format-time-string "%D %-I:%M %p")))

(defun insert-today ()
  "Insert string for today's date nicely formatted in American style,
e.g. Sunday, September 17, 2000."
  (interactive)                 ; permit invocation in minibuffer
  (insert (format-time-string "%A, %B %e, %Y")))

(defun insert-date ()
  "Insert string for today's date nicely formatted in American style,
e.g. 2014-01-22."
  (interactive)                 ; permit invocation in minibuffer
  (insert (format-time-string "%Y-%m-%d")))

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "sensible-browser")

(add-hook 'after-init-hook 'cycbuf-init)

(require 'uniquify)
(setq
 uniquify-buffer-name-style 'post-forward
 uniquify-separator ":")

(add-hook 'yaml-mode-hook
          (function (lambda ()
                      (local-set-key (kbd "C-c #") 'comment-or-uncomment-region)
                      )))


(require 'xcscope)
(cscope-setup)

(if (string-equal (window-system) "x")
    (scroll-bar-mode -1))
